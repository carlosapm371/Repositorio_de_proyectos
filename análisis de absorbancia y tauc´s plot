# -*- coding: utf-8 -*-
"""análisis_absorbancia.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1y10Th-0JQyCdn7dRbYVkFsiYHBhVc4yd
"""

import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
import matplotlib.pyplot as plt
from scipy.signal import find_peaks, peak_widths, chirp
from scipy.optimize import curve_fit

import plotly.io as pio
pio.templates

df1 = pd.read_excel('/content/drive/MyDrive/drxfwhm/absorcion .xlsx', sheet_name = 0)
df2 = pd.read_excel('/content/drive/MyDrive/drxfwhm/absorcion .xlsx', sheet_name=1)
df3 = pd.read_excel('/content/drive/MyDrive/drxfwhm/absorcion .xlsx', sheet_name = 2)
df4 = pd.read_excel('/content/drive/MyDrive/drxfwhm/absorcion .xlsx', sheet_name = 3)
df5 = pd.read_excel('/content/drive/MyDrive/drxfwhm/absorcion .xlsx', sheet_name = 4)
df6 = pd.read_excel('/content/drive/MyDrive/drxfwhm/absorcion .xlsx', sheet_name = 5)
df7 = pd.read_excel('/content/drive/MyDrive/drxfwhm/absorcion .xlsx', sheet_name = 6)
df8 = pd.read_excel('/content/drive/MyDrive/drxfwhm/absorcion .xlsx', sheet_name = 7)
df9 = pd.read_excel('/content/drive/MyDrive/drxfwhm/absorcion .xlsx', sheet_name = 8)
df10 = pd.read_excel('/content/drive/MyDrive/drxfwhm/absorcion .xlsx', sheet_name = 9)
df11 = pd.read_excel('/content/drive/MyDrive/drxfwhm/absorcion .xlsx', sheet_name = 10)
df12 = pd.read_excel('/content/drive/MyDrive/drxfwhm/absorcion .xlsx', sheet_name = 11)
df13 = pd.read_excel('/content/drive/MyDrive/drxfwhm/absorcion .xlsx', sheet_name = 12)
df14 = pd.read_excel('/content/drive/MyDrive/drxfwhm/absorcion .xlsx', sheet_name = 13)
df15 = pd.read_excel('/content/drive/MyDrive/drxfwhm/absorcion .xlsx', sheet_name = 14)

lista_data = [df1,df2,df3,df4,df5,df5,df6,df7,df8,df9,df10,df11,df12, df13, df14, df15]

esp1 = px.line(
    df1,
    x=df1.iloc[:,0],
    y=df1.iloc[:,1],
    template = 'simple_white'
)

titulo =  r'$\text{Espectro de absorbancia de la muestra Dy}_{0.05} \text{Ce}_{0.95} \text{O}_{1.975} - 400°C$'

esp1.update_layout(
    xaxis_title = 'Longitud de onda',
    yaxis_title = 'Absorbancia',
    yaxis=dict(rangemode='nonnegative'),
    title = {
        'text' : titulo,
        'y':0.96,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top',
        }
)

esp1.update_traces(line=dict(color='black'))
iso_x = [246.0,246.0]
iso_y = [-0.15,0.398019]
esp1.add_trace(go.Scatter(x=iso_x, y=iso_y, mode='lines', name='absorción a 246nm',line_color='red',showlegend=True))

esp1.show()

x =df1.iloc[:,0]
y =df1.iloc[:,1]

peaks, _ = find_peaks(y, height=(0.39,0.4),  width=(0.0))
picos = x[peaks]
absorbancia = y[peaks]

#for i, picos in enumerate(x[peaks]):
 # print(f"Posición del pico {i+1}: {picos}")

data = {'inflexion': x[peaks],
        'absorbancia' : y[peaks]
        }
df1_abs = pd.DataFrame(data)

df1_abs = df1_abs[df1_abs.inflexion < 300 ]
df1_abs = df1_abs[df1_abs.absorbancia == (df1_abs.absorbancia.min())]

print(df1_abs)

plt.plot(x, y)
plt.plot(x[peaks], y[peaks], "x")
plt.title('Espectro de absorbancia de la muestra Dy0.05 Ce0.95 O1.975 - 400°C')
plt.show()

esp2 = px.line(
    df2,
    x=df2.iloc[:,0],
    y=df2.iloc[:,1],
    template = 'simple_white'
)

titulo =  r'$\text{Espectro de absorbancia de la muestra Dy}_{0.05} \text{Ce}_{0.95} \text{O}_{1.975} - 500°C$'
esp2.update_layout(
    xaxis_title = 'Longitud de onda',
    yaxis_title = 'Absorbancia',
    yaxis=dict(rangemode='nonnegative'),
    title = {
        'text' : titulo,
        'y':0.96,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top',
        'font': {'family': 'Arial'}
    }

)

esp2.update_traces(line=dict(color='black'))
iso_x = [253.8,253.8]
iso_y = [-0.1,0.425903]
esp2.add_trace(go.Scatter(x=iso_x, y=iso_y, mode='lines', name='Absorción a 253.8nm',line_color='red', showlegend=True))

esp2.show()

x =df2.iloc[:,0]
y =df2.iloc[:,1]



peaks, _ = find_peaks(y, height = (0.4,0.45), distance=15)
picos = x[peaks]
absorbancia = y[peaks]


data = {'inflexion': x[peaks],
        'absorbancia' : y[peaks]
        }
df2_abs = pd.DataFrame(data)

df2_abs = df2_abs[df2_abs.inflexion < 300 ]
df2_abs = df2_abs[df2_abs.absorbancia == (df2_abs.absorbancia.min())]

print(df2_abs)

plt.plot(x, y)
plt.plot(x[peaks], y[peaks], "x")
plt.title('Espectro de absorbancia de la muestra Dy0.05 Ce0.95 O1.975 - 500°C')
plt.show()

esp3 = px.line(
    df3,
    x=df3.iloc[:,0],
    y=df3.iloc[:,1],
    template = 'simple_white'
)

titulo =  r'$\text{Espectro de absorbancia de la muestra Dy}_{0.05} \text{Ce}_{0.95} \text{O}_{1.975} - 600°C$'
esp3.update_layout(
    xaxis_title = 'Longitud de onda',
    yaxis_title = 'Absorbancia',
    yaxis=dict(rangemode='nonnegative'),
    title = {
        'text' : titulo,
        'y':0.96,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'
    }

)

esp3.update_traces(line=dict(color='black'))
iso_x = [246.4,246.4]
iso_y = [-0.1 ,0.477492 ]
esp3.add_trace(go.Scatter(x=iso_x, y=iso_y, mode='lines', name='Absorción a 246.4nm',line_color='red', showlegend=True))
esp3.show()

x =df3.iloc[:,0]

y =df3.iloc[:,1]

peaks, _ = find_peaks(y, height=(0.4, 0.48),  width=(2))
picos = x[peaks]
absorbancia = y[peaks]

#for i, picos in enumerate(x[peaks]):
 # print(f"Posición del pico {i+1}: {picos}")

data = {'inflexion': x[peaks],
        'absorbancia' : y[peaks]
        }
df3_abs = pd.DataFrame(data)

df3_abs = df3_abs[df3_abs.inflexion < 300 ]
df3_abs = df3_abs[df3_abs.absorbancia == (df3_abs.absorbancia.min())]

print(df3_abs)

plt.plot(x, y)
plt.plot(x[peaks], y[peaks], "x")
plt.title('Espectro de absorbancia de la muestra Dy0.05 Ce0.95 O1.975 - 600°C')
plt.show()

esp4 = px.line(
    df4,
    x=df4.iloc[:,0],
    y=df4.iloc[:,1],
    template = 'simple_white'
)

titulo =  r'$\text{Espectro de absorbancia de la muestra Dy}_{0.01} \text{Ce}_{0.9} \text{O}_{1.95} - 400°C$'
esp4.update_layout(
    xaxis_title = 'Longitud de onda',
    yaxis_title = 'Absorbancia',
    yaxis=dict(rangemode='nonnegative'),
    title = {
        'text' : titulo,
        'y':0.96,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'
    }

)

esp4.update_traces(line=dict(color='black'))
iso_x = [246.4,246.4]
iso_y = [-0.1 ,0.435522  ]
esp4.add_trace(go.Scatter(x=iso_x, y=iso_y, mode='lines', name='Absorción a 246.4nm',line_color='red', showlegend=True))

esp4.show()

x =df4.iloc[:,0]

y =df4.iloc[:,1]

peaks, _ = find_peaks(y, height=(0.4, 0.48),  width=(2))
picos = x[peaks]
absorbancia = y[peaks]

#for i, picos in enumerate(x[peaks]):
 # print(f"Posición del pico {i+1}: {picos}")

data = {'inflexion': x[peaks],
        'absorbancia' : y[peaks]
        }
df4_abs = pd.DataFrame(data)

df4_abs = df4_abs[df4_abs.inflexion < 300 ]
df4_abs = df4_abs[df4_abs.absorbancia == (df4_abs.absorbancia.min())]

print(df4_abs)

plt.plot(x, y)
plt.plot(x[peaks], y[peaks], "x")
plt.title('Espectro de absorbancia de la muestra Dy0.1 Ce0.9 O1.95 - 400°C')
plt.show()

df4_abs

esp5 = px.line(
    df5,
    x=df5.iloc[:,0],
    y=df5.iloc[:,1],
    template = 'simple_white'
)

titulo =  r'$\text{Espectro de absorbancia de la muestra Dy}_{0.01} \text{Ce}_{0.9} \text{O}_{1.95} - 500°C$'
esp5.update_layout(
    xaxis_title = 'Longitud de onda',
    yaxis_title = 'Absorbancia',
    yaxis=dict(rangemode='nonnegative'),
    title = {
        'text' : titulo,
        'y':0.96,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'
    }

)

esp5.update_traces(line=dict(color='black'))
iso_x = [246.4,246.4]
iso_y = [-0.1 ,0.409102 ]
esp5.add_trace(go.Scatter(x=iso_x, y=iso_y, mode='lines', name='Absorción a 246nm',line_color='red', showlegend=True))

esp5.show()

x =df5.iloc[:,0]

y =df5.iloc[:,1]

peaks, _ = find_peaks(y, height=(0.4, 0.48),  width=(1))
picos = x[peaks]
absorbancia = y[peaks]

#for i, picos in enumerate(x[peaks]):
 # print(f"Posición del pico {i+1}: {picos}")

data = {'inflexion': x[peaks],
        'absorbancia' : y[peaks]
        }
df5_abs = pd.DataFrame(data)

df5_abs = df5_abs[df5_abs.inflexion < 300 ]
df5_abs = df5_abs[df5_abs.absorbancia == (df5_abs.absorbancia.min())]

print(df5_abs)


plt.plot(x, y)
plt.plot(x[peaks], y[peaks], "x")
plt.title('Espectro de absorbancia de la muestra Dy0.1 Ce0.9 O1.95 - 500°C')
plt.show()

esp6 = px.line(
    df6,
    x=df6.iloc[:,0],
    y=df6.iloc[:,1],
    template = 'simple_white'
)


titulo =  r'$\text{Espectro de absorbancia de la muestra Dy}_{0.01} \text{Ce}_{0.9} \text{O}_{1.95} - 600°C$'
esp6.update_layout(
    xaxis_title = 'Longitud de onda',
    yaxis_title = 'Absorbancia',
    yaxis=dict(rangemode='nonnegative'),
    title = {
        'text' : titulo,
        'y':0.96,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'
    }

)

esp6.update_traces(line=dict(color='black'))

iso_x = [246.0,246.0]
iso_y = [-0.15,0.488095]
esp6.add_trace(go.Scatter(x=iso_x, y=iso_y, mode='lines', name='Absorción a 246nm',line_color='red', showlegend=True))

esp6.show()

x =df6.iloc[:,0]

y =df6.iloc[:,1]

peaks, _ = find_peaks(y, height=(0.4, 0.55),  width=(2))
picos = x[peaks]
absorbancia = y[peaks]

#for i, picos in enumerate(x[peaks]):
 # print(f"Posición del pico {i+1}: {picos}")

data = {'inflexion': x[peaks],
        'absorbancia' : y[peaks]
        }
df6_abs = pd.DataFrame(data)

df6_abs = df6_abs[df6_abs.inflexion < 300 ]
df6_abs = df6_abs[df6_abs.absorbancia == (df6_abs.absorbancia.min())]

print(df6_abs)


plt.plot(x, y)
plt.plot(x[peaks], y[peaks], "x")
plt.title('Espectro de absorbancia de la muestra Dy0.1 Ce0.9 O1.95 - 500°C')
plt.show()

esp7 = px.line(
    df7,
    x=df7.iloc[:,0],
    y=df7.iloc[:,1],
    template = 'simple_white'
)


titulo =  r'$\text{Espectro de absorbancia de la muestra Dy}_{0.015} \text{Ce}_{0.85} \text{O}_{1.925} - 400°C$'

esp7.update_layout(
    xaxis_title = 'Longitud de onda',
    yaxis_title = 'Absorbancia',
    yaxis=dict(rangemode='nonnegative'),
    title = {
        'text' : titulo,
        'y':0.96,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'
    }

)

esp7.update_traces(line=dict(color='black'))
iso_x = [ 247.6 , 247.6]
iso_y = [-0.1 ,00.434896]
esp7.add_trace(go.Scatter(x=iso_x, y=iso_y, mode='lines', name='Absorción a 247.6nm',line_color='red', showlegend=True))

esp7.show()

x =df7.iloc[:,0]

y =df7.iloc[:,1]

peaks, _ = find_peaks(y, height=(0.4, 0.55),  width=(1))
picos = x[peaks]
absorbancia = y[peaks]


data = {'inflexion': x[peaks],
        'absorbancia' : y[peaks]
        }
df7_abs = pd.DataFrame(data)

df7_abs = df7_abs[df7_abs.inflexion < 300 ]
df7_abs = df7_abs[df7_abs.absorbancia == (df7_abs.absorbancia.min())]

print(df7_abs)


plt.plot(x, y)
plt.plot(x[peaks], y[peaks], "x")
plt.title('Espectro de absorbancia de la muestra Dy0.1 Ce0.9 O1.95 - 500°C')
plt.show()

esp8 = px.line(
    df8,
    x=df8.iloc[:,0],
    y=df8.iloc[:,1],
    template = 'simple_white'
)


titulo =  r'$\text{Espectro de absorbancia de la muestra Dy}_{0.015} \text{Ce}_{0.85} \text{O}_{1.925} - 500°C$'

esp8.update_layout(
    xaxis_title = 'Longitud de onda',
    yaxis_title = 'Absorbancia',
    yaxis=dict(rangemode='nonnegative'),
    title = {
        'text' : titulo,
        'y':0.96,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'
    }

)

esp8.update_traces(line=dict(color='black'))
iso_x = [ 245.4, 245.4]
iso_y = [-0.1 ,0.475347]
esp8.add_trace(go.Scatter(x=iso_x, y=iso_y, mode='lines', name='Absorción a 245.4nm',line_color='red', showlegend=True))

esp8.show()

x =df8.iloc[:,0]

y =df8.iloc[:,1]

peaks, _ = find_peaks(y, height=(0.4, 0.55),  width=(1))
picos = x[peaks]
absorbancia = y[peaks]


data = {'inflexion': x[peaks],
        'absorbancia' : y[peaks]
        }
df8_abs = pd.DataFrame(data)

df8_abs = df8_abs[df8_abs.inflexion < 300 ]
df8_abs = df8_abs[df8_abs.absorbancia == (df8_abs.absorbancia.min())]

print(df8_abs)


plt.plot(x, y)
plt.plot(x[peaks], y[peaks], "x")
plt.title('Espectro de absorbancia de la muestra Dy0.1 Ce0.9 O1.95 - 500°C')
plt.show()

esp9 = px.line(
    df9,
    x=df9.iloc[:,0],
    y=df9.iloc[:,1],
    template = 'simple_white'
)


titulo =  r'$\text{Espectro de absorbancia de la muestra Dy}_{0.015} \text{Ce}_{0.85} \text{O}_{1.925} - 600°C$'

esp9.update_layout(
    xaxis_title = 'Longitud de onda',
    yaxis_title = 'Absorbancia',
    yaxis=dict(rangemode='nonnegative'),
    title = {
        'text' : titulo,
        'y':0.96,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'
    }

)

esp9.update_traces(line=dict(color='black'))
iso_x = [  243.4 ,  243.4]
iso_y = [-0.1 ,0.485116]
esp9.add_trace(go.Scatter(x=iso_x, y=iso_y, mode='lines', name='Absorción a 243.4nm',line_color='red', showlegend=True))

esp9.show()

x =df9.iloc[:,0]

y =df9.iloc[:,1]

peaks, _ = find_peaks(y, height=(0.4, 0.55),  width=(1))
picos = x[peaks]
absorbancia = y[peaks]


data = {'inflexion': x[peaks],
        'absorbancia' : y[peaks]
        }
df9_abs = pd.DataFrame(data)

df9_abs = df9_abs[df9_abs.inflexion < 300 ]
df9_abs = df9_abs[df9_abs.absorbancia == (df9_abs.absorbancia.min())]

print(df9_abs)


plt.plot(x, y)
plt.plot(x[peaks], y[peaks], "x")
plt.title('Espectro de absorbancia de la muestra Dy0.1 Ce0.9 O1.95 - 500°C')
plt.show()

esp10 = px.line(
    df10,
    x=df10.iloc[:,0],
    y=df10.iloc[:,1],
    template = 'simple_white'
)


titulo =  r'$\text{Espectro de absorbancia de la muestra Dy}_{0.2} \text{Ce}_{0.8} \text{O}_{1.9} - 400°C$'

esp10.update_layout(
    xaxis_title = 'Longitud de onda',
    yaxis_title = 'Absorbancia',
    yaxis=dict(rangemode='nonnegative'),
    title = {
        'text' : titulo,
        'y':0.96,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'
    }

)

esp10.update_traces(line=dict(color='black'))
iso_x = [ 243.2 , 243.2]
iso_y = [-0.1 ,0.406667]
esp10.add_trace(go.Scatter(x=iso_x, y=iso_y, mode='lines', name='Absorción a 243.2nm',line_color='red', showlegend=True))

esp10.show()

x =df10.iloc[:,0]

y =df10.iloc[:,1]

peaks, _ = find_peaks(y, height=(0.4, 0.55),  width=(1))
picos = x[peaks]
absorbancia = y[peaks]


data = {'inflexion': x[peaks],
        'absorbancia' : y[peaks]
        }
df10_abs = pd.DataFrame(data)

df10_abs = df10_abs[df10_abs.inflexion < 300 ]
df10_abs = df10_abs[df10_abs.absorbancia == (df10_abs.absorbancia.min())]

print(df10_abs)


plt.plot(x, y)
plt.plot(x[peaks], y[peaks], "x")
plt.title('Espectro de absorbancia de la muestra Dy0.1 Ce0.9 O1.95 - 500°C')
plt.show()

esp11 = px.line(
    df11,
    x=df11.iloc[:,0],
    y=df11.iloc[:,1],
    template = 'simple_white'
)


titulo =  r'$\text{Espectro de absorbancia de la muestra Dy}_{0.2} \text{Ce}_{0.8} \text{O}_{1.9} - 500°C$'


esp11.update_layout(
    xaxis_title = 'Longitud de onda',
    yaxis_title = 'Absorbancia',
    yaxis=dict(rangemode='nonnegative'),
    title = {
        'text' : titulo,
        'y':0.96,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'
    }

)

esp11.update_traces(line=dict(color='black'))
iso_x = [243.4 , 243.4]
iso_y = [-0.1 ,0.544085]
esp11.add_trace(go.Scatter(x=iso_x, y=iso_y, mode='lines', name='Absorción a 243.4nm',line_color='red', showlegend=True))

esp11.show()

x =df11.iloc[:,0]

y =df11.iloc[:,1]

peaks, _ = find_peaks(y, height=(0.5, 0.6),  width=(1))
picos = x[peaks]
absorbancia = y[peaks]


data = {'inflexion': x[peaks],
        'absorbancia' : y[peaks]
        }
df11_abs = pd.DataFrame(data)

df11_abs = df11_abs[df11_abs.inflexion < 300 ]
df11_abs = df11_abs[df11_abs.absorbancia == (df11_abs.absorbancia.min())]

print(df11_abs)


plt.plot(x, y)
plt.plot(x[peaks], y[peaks], "x")
plt.title('Espectro de absorbancia de la muestra Dy0.1 Ce0.9 O1.95 - 500°C')
plt.show()

esp12 = px.line(
    df12,
    x=df12.iloc[:,0],
    y=df12.iloc[:,1],
    template = 'simple_white'
)


titulo =  r'$\text{Espectro de absorbancia de la muestra Dy}_{0.2} \text{Ce}_{0.8} \text{O}_{1.9} - 600°C$'


esp12.update_layout(
    xaxis_title = 'Longitud de onda',
    yaxis_title = 'Absorbancia',
    yaxis=dict(rangemode='nonnegative'),
    title = {
        'text' : titulo,
        'y':0.96,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'
    }

)

esp12.update_traces(line=dict(color='black'))
iso_x = [ 247.6 , 247.6]
iso_y = [-0.1 ,00.434896]
esp12.add_trace(go.Scatter(x=iso_x, y=iso_y, mode='lines', name='Absorción a 247.6nm',line_color='red', showlegend=True))

esp12.show()

x =df12.iloc[:,0]

y =df12.iloc[:,1]

peaks, _ = find_peaks(y, height=(0.4, 0.55),  width=(1))
picos = x[peaks]
absorbancia = y[peaks]


data = {'inflexion': x[peaks],
        'absorbancia' : y[peaks]
        }
df12_abs = pd.DataFrame(data)

df12_abs = df12_abs[df12_abs.inflexion < 300 ]
df12_abs = df12_abs[df12_abs.absorbancia == (df12_abs.absorbancia.min())]

print(df12_abs)


plt.plot(x, y)
plt.plot(x[peaks], y[peaks], "x")
plt.title('Espectro de absorbancia de la muestra Dy0.1 Ce0.9 O1.95 - 500°C')
plt.show()

esp13 = px.line(
    df13,
    x=df13.iloc[:,0],
    y=df13.iloc[:,1],
    template = 'simple_white'
)


titulo =  r'$\text{Espectro de absorbancia de la muestra Ce} \text{O}_{2} - 400°C$'

esp13.update_layout(
    xaxis_title = 'Longitud de onda',
    yaxis_title = 'Absorbancia',
    yaxis=dict(rangemode='nonnegative'),
    title = {
        'text' : titulo,
        'y':0.96,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'
    }

)

esp13.update_traces(line=dict(color='black'))
iso_x = [ 224.8, 224.8]
iso_y = [-0.1 ,0.439952]
esp13.add_trace(go.Scatter(x=iso_x, y=iso_y, mode='lines', name='Absorción a 224.8nm',line_color='red', showlegend=True))

esp13.show()

x =df13.iloc[:,0]

y =df13.iloc[:,1]

peaks, _ = find_peaks(y, height=(0.4, 0.55),  width=(1))
picos = x[peaks]
absorbancia = y[peaks]


data = {'inflexion': x[peaks],
        'absorbancia' : y[peaks]
        }
df13_abs = pd.DataFrame(data)

df13_abs = df13_abs[df13_abs.inflexion < 300 ]
df13_abs = df13_abs[df13_abs.absorbancia == (df13_abs.absorbancia.min())]

print(df13_abs)


plt.plot(x, y)
plt.plot(x[peaks], y[peaks], "x")
plt.title('Espectro de absorbancia de la muestra Ce O2 - 400°C')
plt.show()

esp14 = px.line(
    df14,
    x=df14.iloc[:,0],
    y=df14.iloc[:,1],
    template = 'simple_white'
)


titulo =  r'$\text{Espectro de absorbancia de la muestra Ce} \text{O}_{2} - 500°C$'

esp14.update_layout(
    xaxis_title = 'Longitud de onda',
    yaxis_title = 'Absorbancia',
    yaxis=dict(rangemode='nonnegative'),
    title = {
        'text' : titulo,
        'y':0.96,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'
    }

)

esp14.update_traces(line=dict(color='black'))
iso_x = [  237.6 ,  237.6]
iso_y = [-0.1 ,0.485845]
esp14.add_trace(go.Scatter(x=iso_x, y=iso_y, mode='lines', name='Absorción a 237.6nm',line_color='red', showlegend=True))

esp14.show()

x =df14.iloc[:,0]

y =df14.iloc[:,1]

peaks, _ = find_peaks(y, height=(0.4, 0.55),  width=(1))
picos = x[peaks]
absorbancia = y[peaks]


data = {'inflexion': x[peaks],
        'absorbancia' : y[peaks]
        }
df14_abs = pd.DataFrame(data)

df14_abs = df14_abs[df14_abs.inflexion < 300 ]
df14_abs = df14_abs[df14_abs.absorbancia == (df14_abs.absorbancia.min())]

print(df14_abs)


plt.plot(x, y)
plt.plot(x[peaks], y[peaks], "x")
plt.title('Espectro de absorbancia de la muestra Ce O2 - 500°C')
plt.show()

esp15 = px.line(
    df15,
    x=df15.iloc[:,0],
    y=df15.iloc[:,1],
    template = 'simple_white'
)


titulo =  r'$\text{Espectro de absorbancia de la muestra Ce} \text{O}_{2} - 600°C$'

esp15.update_layout(
    xaxis_title = 'Longitud de onda',
    yaxis_title = 'Absorbancia',
    yaxis=dict(rangemode='nonnegative'),
    title = {
        'text' : titulo,
        'y':0.96,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'
    }

)

esp15.update_traces(line=dict(color='black'))
iso_x = [ 230.2 , 230.2]
iso_y = [-0.1 ,0.58056]
esp15.add_trace(go.Scatter(x=iso_x, y=iso_y, mode='lines', name='Absorción a 230.2nm',line_color='red', showlegend=True))

esp15.show()

x =df15.iloc[:,0]

y =df15.iloc[:,1]

peaks, _ = find_peaks(y, height=(0.55, 0.7),  width=(1))
picos = x[peaks]
absorbancia = y[peaks]


data = {'inflexion': x[peaks],
        'absorbancia' : y[peaks]
        }
df15_abs = pd.DataFrame(data)

df15_abs = df15_abs[df15_abs.inflexion < 300 ]
df15_abs = df15_abs[df15_abs.absorbancia == (df15_abs.absorbancia.min())]

print(df15_abs)


plt.plot(x, y)
plt.plot(x[peaks], y[peaks], "x")
plt.title('Espectro de absorbancia de la muestra CeO2 - 600°C')
plt.show()

#tauc data
#x
energy = (1240)/df1.iloc[:,0]
energy
#y
ahv = (((2.303)*df1.iloc[:,1])*energy)**2

data = {'energy':energy,
        'ahv':ahv
}
tauc = pd.DataFrame(data)

taucgap = tauc[tauc.energy > 5]
taucgap

#regresion lineal




x=taucgap.iloc[:,0]
y=taucgap.iloc[:,1]

slope, _ = np.polyfit(x,y,1)

print('pendiente:', slope)

y = slope * x + 1

fig = px.line(tauc,
              x='energy',
              y='ahv'
)

fig.add_trace( go.Scatter(x=x, y=y, mode = 'lines', name='linea'))
fig.show()



lista_tauc=[]

for i in range(len(lista_data)):
   df_actualizado = lista_data[i]
   energy = (1240) / df_actualizado.iloc[:, 0]
   ahv = (((2.303) * df_actualizado.iloc[:, 1]) * energy) ** 2
   data = {'energy': energy, 'ahv': ahv}
   dft = pd.DataFrame(data)
   lista_tauc.append(dft)




   #print (f'dataframe {i+1}:')
   #print(df.head(2))

lista_tauc[0]

for i in range(len(lista_tauc)):
  df_actualizado = lista_tauc[i]
  fig = px.line(df_actualizado,
                x='energy',
                y='ahv',
                template = 'simple_white'
                )
  fig.update_layout(
    xaxis_title = 'Energia (eV)',
    yaxis_title = '(ahv)',
    yaxis=dict(rangemode='nonnegative'),
    title = {
       'text' : f'grafica no.{i+1}',
       'y':0.96,
       'x':0.5,
       'xanchor': 'center',
       'yanchor': 'top'}
    )
  fig.update_traces(line=dict(color='black'))
  fig.show()

