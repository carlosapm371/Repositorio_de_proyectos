# -*- coding: utf-8 -*-
"""análisis_DRX_y_gráficas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JamkpdChRjkkBh9V1eVjiQ_sPUW4jqR1
"""

#pip install -U kaleido

import pandas as pd
import plotly.express as px
import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import find_peaks, peak_widths
from scipy.optimize import curve_fit


#import kaleido

########DataFrame correspondiente a la muestra Dy0.05 Ce0.95 O1.925 - 400C


df1 = pd.read_excel('/content/drive/MyDrive/drx sin ruido /drx dopajes .xlsx',
                    sheet_name = 'D1')
df1 = df1.drop(labels=0 , axis=0)
D1 = df1.rename(columns = {'Tabla 1':'angulo_2theta',
                      'Unnamed: 1':'Intensidad'})
D1 = D1[D1.angulo_2theta<70]

D1.head(3)



import plotly.io as pio
pio.templates

import plotly.graph_objects as go

#grafica de D1


#el cliclo for se utiliza para dar formato a la grafica
for template in ["plotly", "plotly_white", "plotly_dark", "ggplot2", "seaborn", "simple_white", "none"]:
  template = "simple_white"
  pio.templates.default = template
  drx_D1 = px.line(D1, x='angulo_2theta',
                   y='Intensidad',
                   template=template)
  drx_D1.update_layout(
      xaxis_title='Angulo 2θ',
      yaxis_title='Intensidad (u.a)',
      title={
        'text': "Patron de difracción de la muestra: Dy0.05 Ce0.95 O1.925 - 400°C",
        'y':0.96,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'}
  )


#etiquetas de los planos de difraccion
drx_D1.add_annotation(x=28.563, y=9400, text="(111)",showarrow=False)
drx_D1.add_annotation(x=33.065, y=3650, text="(200)",showarrow=False)
drx_D1.add_annotation(x=47.4804, y=5350, text="(220)",showarrow=False)
drx_D1.add_annotation(x=56.3514, y=4100, text="(311)",showarrow=False)
drx_D1.add_annotation(x=59.0348, y=1300, text="(222)",showarrow=False)
drx_D1.add_annotation(x=69.3917, y=1200, text="(400)",showarrow=False)

drx_D1.update_traces(line=dict(color='black'))


drx_D1.show()

"""Análisis del patrón de difracción de la muestra D1

Dy0.05 Ce0.95 O1.925 - 400°C


"""

# Datos de la muestra D1
x = D1.angulo_2theta
y = D1.Intensidad

# Encontrar los picos en el patrón de difracción
peaks, _ = find_peaks(y, height=1000, width=15)
picos = x[peaks]
intensities = y[peaks]

#Calcular la anchura media de los picos

results_half = peak_widths(y, peaks, rel_height=0.5)

#obtener los valore de FWHM

fwhm_values = results_half[0]



# Imprimir las posiciones de los picos
for i, picos in enumerate(x[peaks]):
  print(f"Posición del pico {i+1}: {picos}")

print('######################################################################################################################################')

#imprimir los valores de FWHM

for i, fwhm in enumerate(fwhm_values):
  print(f'FWHM del pico {i+1}: {fwhm}')



#Crear diccionario con la informacion de los picos de drx
data ={'posicion_del_pico': x[peaks],
       'intensidad_del_pico': intensities,
       'FWHM': fwhm_values,
       }


#Creando un cuadro de datos con 'data'

df_picos_D1 =pd.DataFrame(data)

# Visualizar el patrón de difracción y los picos
plt.plot(x, y)
plt.plot(x[peaks], y[peaks], "x")
plt.show()

x = D1.angulo_2theta.to_numpy()
y = D1.Intensidad.to_numpy()
x, y

#angulo del pico en grados
angulo_theta_grados = (df_picos_D1.iloc[:, 0])/2
angulo_theta_grados = angulo_theta_grados.values.tolist()

# Convertir a radianes utilizando numpy.radians()
angulo_theta_radianes = np.radians(angulo_theta_grados)

#cos_theta

cos_theta = np.cos(angulo_theta_radianes)

#convertir FWHM a radianes

fwhm_rad = np.radians(df_picos_D1.FWHM)

#ecuacion de scherrer

K=0.9
L=0.154187
B = (K*L)/((fwhm_rad)*(cos_theta))

for i, cristalita in enumerate(B):
  print(f"El valor de la cristalita para el pico {i+1}: es {cristalita}")

df_picos_D1

########DataFrame correspondiente a la muestra Dy0.05 Ce0.95 O1.925 - 500C


df1 = pd.read_excel('/content/drive/MyDrive/drx sin ruido /drx dopajes .xlsx',
                    sheet_name = 'D2')
df1 = df1.drop(labels=0 , axis=0)
D2 = df1.rename(columns = {'Tabla 1':'angulo_2theta',
                      'Unnamed: 1':'Intensidad'})
D2 = D2[D2.angulo_2theta<=70]

D2.head(3)

#grafica de D2
template = "simple_white"
pio.templates.default = template

drx_D2 = px.line(D2,
                 x='angulo_2theta',
                 y= 'Intensidad',
)
drx_D2.update_layout(
      xaxis_title='Angulo 2θ',
      yaxis_title='Intensidad (u.a)',
      title={
        'text': "Patron de difracción de la muestra: Dy0.05 Ce0.95 O1.925 - 500°C",
        'y':0.96,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'}
)



drx_D2.update_traces(line=dict(color='black'))

drx_D2.add_annotation(x=28.563, y=7500, text="(111)",showarrow=False)
drx_D2.add_annotation(x=33.08, y=3900, text="(200)",showarrow=False)
drx_D2.add_annotation(x=47.4804, y=5000, text="(220)",showarrow=False)
drx_D2.add_annotation(x=56.3514, y=3750, text="(311)",showarrow=False)
drx_D2.add_annotation(x=59.0348, y=1450, text="(222)",showarrow=False)
drx_D2.add_annotation(x=69.3917, y=1250, text="(400)",showarrow=False)






drx_D2.show()

"""Análisis del patrón de difracción de la muestra D2

Dy0.05 Ce0.95 O1.925 - 500°C


"""

# Datos de la muestra D2
x = D2.angulo_2theta
y = D2.Intensidad

# Encontrar los picos en el patrón de difracción y el FWHM
peaks, _ = find_peaks(y, height=1000, width=15)
intensities = y[peaks]
results_half = peak_widths(y, peaks, rel_height=0.5)
fwhm_values = results_half[0]

#imprimir los valores de FWHM

for i, fwhm in enumerate(fwhm_values):
  print(f'FWHM del pico {i+1}: {fwhm}')

#Crear diccionario con la informacion de los picos de drx
data ={'posicion_del_pico': x[peaks],
       'intensidad_del_pico': intensities,
       'FWHM': fwhm_values}

#Creando un cuadro de datos con 'data'

df_picos_D2 =pd.DataFrame(data)


# Imprimir las posiciones de los picos
print("Posiciones de los picos:")
print(x[peaks])

# Visualizar el patrón de difracción y los picos
plt.plot(x, y)
plt.plot(x[peaks], y[peaks], "x")
plt.show()

########DataFrame correspondiente a la muestra Dy0.05 Ce0.95 O1.925 - 600C


df1 = pd.read_excel('/content/drive/MyDrive/drx sin ruido /drx dopajes .xlsx',
                    sheet_name = 'D3')
df1 = df1.drop(labels=0 , axis=0)
D3 = df1.rename(columns = {'Tabla 1':'angulo_2theta',
                      'Unnamed: 1':'Intensidad'})
D3 = D3[D3.angulo_2theta<=70]

D3.head(3)

#grafica de D3
template = "simple_white"
pio.templates.default = template

drx_D3 = px.line(D3,
                 x='angulo_2theta',
                 y= 'Intensidad',
                 )

drx_D3.update_layout(
      xaxis_title='Angulo 2θ',
      yaxis_title='Intensidad (u.a)',
      title={
        'text': "Patron de difracción de la muestra: Dy0.05 Ce0.95 O1.925 - 600°C",
        'y':0.96,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'}
  )

drx_D3.update_traces(line=dict(color='black'))

drx_D3.add_annotation(x=28.563, y=8500, text="(111)",showarrow=False)
drx_D3.add_annotation(x=33.08, y=4100, text="(200)",showarrow=False)
drx_D3.add_annotation(x=47.4804, y=5000, text="(220)",showarrow=False)
drx_D3.add_annotation(x=56.3514, y=4050, text="(311)",showarrow=False)
drx_D3.add_annotation(x=59.0348, y=1450, text="(222)",showarrow=False)
drx_D3.add_annotation(x=69.3917, y=1250, text="(400)",showarrow=False)


drx_D3.show()

"""Análisis del patrón de difracción de la muestra D3

Dy0.05 Ce0.95 O1.925 - 600°C


"""

# Datos de la muestra D3
x = D3.angulo_2theta
y = D3.Intensidad

# Encontrar los picos en el patrón de difracción
peaks, _ = find_peaks(y, height=1000, width=15)
intensities = y[peaks]
results_half = peak_widths(y, peaks, rel_height=0.5)
fwhm_values = results_half[0]

#imprimir los valores de FWHM

for i, fwhm in enumerate(fwhm_values):
  print(f'FWHM del pico {i+1}: {fwhm}')

#Crear diccionario con la informacion de los picos de drx
data ={'posicion_del_pico': x[peaks],
       'intensidad_del_pico': intensities,
       'FWHM': fwhm_values}


#Creando un cuadro de datos con 'data'

df_picos_D3 =pd.DataFrame(data)


# Imprimir las posiciones de los picos
print("Posiciones de los picos:")
print(x[peaks])

# Visualizar el patrón de difracción y los picos
plt.plot(x, y)
plt.plot(x[peaks], y[peaks], "x")
plt.show()

########DataFrame correspondiente a la muestra Dy0.1 Ce0.9 O1.95 - 400C


df1 = pd.read_excel('/content/drive/MyDrive/drx sin ruido /drx dopajes .xlsx',
                    sheet_name = 'D4')
df1 = df1.drop(labels=0 , axis=0)
D4 = df1.rename(columns = {'Tabla 1':'angulo_2theta',
                      'Unnamed: 1':'Intensidad'})
D4 = D4[D4.angulo_2theta<71]
D4.tail(3)

#grafica de D4
template = "simple_white"
pio.templates.default = template

drx_D4 = px.line(D4,
                 x='angulo_2theta',
                 y= 'Intensidad'
                 )

drx_D4.update_layout(
      xaxis_title='Angulo 2θ',
      yaxis_title='Intensidad (u.a)',
      title={
        'text': "Patron de difracción de la muestra: Dy0.1 Ce0.9 O1.95 - 400°C",
        'y':0.96,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'}
  )

drx_D4.update_traces(line=dict(color='black'))

drx_D4.add_annotation(x=28.563, y=6700, text="(111)",showarrow=False)
drx_D4.add_annotation(x=33.08, y=3120, text="(200)",showarrow=False)
drx_D4.add_annotation(x=47.4804, y=4100, text="(220)",showarrow=False)
drx_D4.add_annotation(x=56.3514, y=3310, text="(311)",showarrow=False)
drx_D4.add_annotation(x=59.0348, y=1450, text="(222)",showarrow=False)
drx_D4.add_annotation(x=69.3917, y=1250, text="(400)",showarrow=False)

drx_D4.show()

# Datos de la muestra D4
x = D4.angulo_2theta
y = D4.Intensidad

# Encontrar los picos en el patrón de difracción
peaks, _ = find_peaks(y, height=900, width=15)
intensities = y[peaks]
results_half = peak_widths(y, peaks, rel_height=0.5)
fwhm_values = results_half[0]

#imprimir los valores de FWHM

for i, fwhm in enumerate(fwhm_values):
  print(f'FWHM del pico {i+1}: {fwhm}')

#Crear diccionario con la informacion de los picos de drx
data ={'posicion_del_pico': x[peaks],
       'intensidad_del_pico': intensities,
       'FWHM': fwhm_values}

#Creando un cuadro de datos con 'data'

df_picos_D4 =pd.DataFrame(data)


# Imprimir las posiciones de los picos
print("Posiciones de los picos:")
print(x[peaks])

# Visualizar el patrón de difracción y los picos
plt.plot(x, y)
plt.plot(x[peaks], y[peaks], "x")
plt.show()

########DataFrame correspondiente a la muestra Dy0.1 Ce0.9 O1.95 - 500C


df5 = pd.read_csv('/content/drive/MyDrive/drx sin ruido /D5 -Tabla 1.csv')
df5 = df5.drop(labels=0 , axis=0)
D5 = df1.rename(columns = {'Tabla 1':'angulo_2theta',
                      'Unnamed: 1':'Intensidad'})
D5 = D5[D5.angulo_2theta<71]
D5.tail()

#grafica de D5
template = "simple_white"
pio.templates.default = template

drx_D5 = px.line(D5,
                 x='angulo_2theta',
                 y= 'Intensidad'
                 )

drx_D5.update_layout(
      xaxis_title='Angulo 2θ',
      yaxis_title='Intensidad (u.a)',
      title={
        'text': "Patron de difracción de la muestra: Dy0.1 Ce0.9 O1.95 - 500°C",
        'y':0.96,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'}
  )

drx_D5.update_traces(line=dict(color='black'))

drx_D5.add_annotation(x=28.563, y=6700, text="(111)",showarrow=False)
drx_D5.add_annotation(x=33.08, y=3200, text="(200)",showarrow=False)
drx_D5.add_annotation(x=47.4804, y=4100, text="(220)",showarrow=False)
drx_D5.add_annotation(x=56.3514, y=3350, text="(311)",showarrow=False)
drx_D5.add_annotation(x=59.0348, y=1450, text="(222)",showarrow=False)
drx_D5.add_annotation(x=69.3917, y=1250, text="(400)",showarrow=False)

drx_D5.show()

# Datos de la muestra D5
x = D5.angulo_2theta
y = D5.Intensidad

# Encontrar los picos en el patrón de difracción
peaks, _ = find_peaks(y, height=900, width=15)
intensities = y[peaks]
results_half = peak_widths(y, peaks, rel_height=0.5)
fwhm_values = results_half[0]

#imprimir los valores de FWHM

for i, fwhm in enumerate(fwhm_values):
  print(f'FWHM del pico {i+1}: {fwhm}')

#Crear diccionario con la informacion de los picos de drx
data ={'posicion_del_pico': x[peaks],
       'intensidad_del_pico': intensities,
       'FWHM': fwhm_values}


#Creando un cuadro de datos con 'data'

df_picos_D5 =pd.DataFrame(data)


# Imprimir las posiciones de los picos
print("Posiciones de los picos:")
print(x[peaks])

# Visualizar el patrón de difracción y los picos
plt.plot(x, y)
plt.plot(x[peaks], y[peaks], "x")
plt.show()

########DataFrame correspondiente a la muestra Dy0.1 Ce0.9 O1.95 - 600C


df1 = pd.read_excel('/content/drive/MyDrive/drx sin ruido /drx dopajes .xlsx',
                    sheet_name = 'D6')
df1 = df1.drop(labels=0 , axis=0)
D6 = df1.rename(columns = {'Tabla 1':'angulo_2theta',
                      'Unnamed: 1':'Intensidad'})
D6 = D6[D6.angulo_2theta<71]
D6.head(3)

#grafica de D6
template = "simple_white"
pio.templates.default = template

drx_D6 = px.line(D6,
                 x='angulo_2theta',
                 y= 'Intensidad'
                 )

drx_D6.update_layout(
      xaxis_title='Angulo 2θ',
      yaxis_title='Intensidad (u.a)',
      title={
        'text': "Patron de difracción de la muestra: Dy0.1 Ce0.9 O1.95 - 600°C",
        'y':0.96,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'}
  )

drx_D6.update_traces(line=dict(color='black'))

drx_D6.add_annotation(x=28.563, y=4200, text="(111)",showarrow=False)
drx_D6.add_annotation(x=33.08, y=2900, text="(200)",showarrow=False)
drx_D6.add_annotation(x=47.4804, y=3200, text="(220)",showarrow=False)
drx_D6.add_annotation(x=56.3514, y=2700, text="(311)",showarrow=False)
drx_D6.add_annotation(x=59.0348, y=1200, text="(222)",showarrow=False)
drx_D6.add_annotation(x=69.3917, y=1250, text="(400)",showarrow=False)

drx_D6.show()

# Datos de la muestra D6
x = D6.angulo_2theta
y = D6.Intensidad

# Encontrar los picos en el patrón de difracción
peaks, _ = find_peaks(y, height=500, width=15)
intensities = y[peaks]
results_half = peak_widths(y, peaks, rel_height=0.5)
fwhm_values = results_half[0]

#imprimir los valores de FWHM

for i, fwhm in enumerate(fwhm_values):
  print(f'FWHM del pico {i+1}: {fwhm}')

#Crear diccionario con la informacion de los picos de drx
data ={'posicion_del_pico': x[peaks],
       'intensidad_del_pico': intensities,
       'FWHM': fwhm_values}

#Creando un cuadro de datos con 'data'

df_picos_D6 = pd.DataFrame(data)


# Imprimir las posiciones de los picos
print("Posiciones de los picos:")
print(x[peaks])

# Visualizar el patrón de difracción y los picos
plt.plot(x, y)
plt.plot(x[peaks], y[peaks], "x")
plt.show()

########DataFrame correspondiente a la muestra Dy0.15 Ce0.85 O1.925 - 400C


df1 = pd.read_excel('/content/drive/MyDrive/drx sin ruido /drx dopajes .xlsx',
                    sheet_name = 'D7')
df1 = df1.drop(labels=0 , axis=0)
D7 = df1.rename(columns = {'Tabla 1':'angulo_2theta',
                      'Unnamed: 1':'Intensidad'})
D7 = D7[D7.angulo_2theta<71]
D7.head(3)

#grafica de D7
template = "simple_white"
pio.templates.default = template

drx_D7 = px.line(D7,
                 x='angulo_2theta',
                 y= 'Intensidad'
                 )
drx_D7.update_layout(
      xaxis_title='Angulo 2θ',
      yaxis_title='Intensidad (u.a)',
      title={
        'text': "Patron de difracción de la muestra: Dy0.15 Ce0.85 O1.925 - 400°C",
        'y':0.96,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'}
  )

drx_D7.update_traces(line=dict(color='black'))

drx_D7.add_annotation(x=28.563, y=6000, text="(111)",showarrow=False)
drx_D7.add_annotation(x=33.08, y=3350, text="(200)",showarrow=False)
drx_D7.add_annotation(x=47.4804, y=4000, text="(220)",showarrow=False)
drx_D7.add_annotation(x=56.3514, y=3250, text="(311)",showarrow=False)
drx_D7.add_annotation(x=59.0348, y=1450, text="(222)",showarrow=False)
drx_D7.add_annotation(x=69.3917, y=1250, text="(400)",showarrow=False)

drx_D7.show()

# Datos de la muestra D7
x = D7.angulo_2theta
y = D7.Intensidad

# Encontrar los picos en el patrón de difracción
peaks, _ = find_peaks(y, height=500, width=15)
intensities = y[peaks]
results_half = peak_widths(y, peaks, rel_height=0.5)
fwhm_values = results_half[0]

#imprimir los valores de FWHM

for i, fwhm in enumerate(fwhm_values):
  print(f'FWHM del pico {i+1}: {fwhm}')

#Crear diccionario con la informacion de los picos de drx
data ={'posicion_del_pico': x[peaks],
       'intensidad_del_pico': intensities,
       'FWHM': fwhm_values}

#Creando un cuadro de datos con 'data'

df_picos_D7 = pd.DataFrame(data)


# Imprimir las posiciones de los picos
print("Posiciones de los picos:")
print(x[peaks])

# Visualizar el patrón de difracción y los picos
plt.plot(x, y)
plt.plot(x[peaks], y[peaks], "x")
plt.show()

########DataFrame correspondiente a la muestra Dy0.15 Ce0.85 O1.925 - 500C


df1 = pd.read_excel('/content/drive/MyDrive/drx sin ruido /drx dopajes .xlsx',
                    sheet_name = 'D8')
df1 = df1.drop(labels=0 , axis=0)
D8 = df1.rename(columns = {'Tabla 1':'angulo_2theta',
                      'Unnamed: 1':'Intensidad'})
D8 =D8[D8.angulo_2theta<71]
D8.head(3)

#grafica de D8
template = "simple_white"
pio.templates.default = template

drx_D8 = px.line(D8,
                 x='angulo_2theta',
                 y= 'Intensidad'
                 )
drx_D8.update_layout(
      xaxis_title='Angulo 2θ',
      yaxis_title='Intensidad (u.a)',
      title={
        'text': "Patron de difracción de la muestra: Dy0.15 Ce0.85 O1.925 - 500°C",
        'y':0.96,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'}

  )

drx_D8.update_traces(line=dict(color='black'))

drx_D8.add_annotation(x=28.563, y=7500, text="(111)",showarrow=False)
drx_D8.add_annotation(x=33.08, y=3900, text="(200)",showarrow=False)
drx_D8.add_annotation(x=47.4804, y=5000, text="(220)",showarrow=False)
drx_D8.add_annotation(x=56.3514, y=3750, text="(311)",showarrow=False)
drx_D8.add_annotation(x=59.0348, y=1450, text="(222)",showarrow=False)
drx_D8.add_annotation(x=69.3917, y=1250, text="(400)",showarrow=False)

drx_D8.show()

# Datos de la muestra D8
x = D8.angulo_2theta
y = D8.Intensidad

# Encontrar los picos en el patrón de difracción
peaks, _ = find_peaks(y, height=500, width=15)
intensities = y[peaks]
results_half = peak_widths(y, peaks, rel_height=0.5)
fwhm_values = results_half[0]

#imprimir los valores de FWHM

for i, fwhm in enumerate(fwhm_values):
  print(f'FWHM del pico {i+1}: {fwhm}')

#Crear diccionario con la informacion de los picos de drx
data ={'posicion_del_pico': x[peaks],
       'intensidad_del_pico': intensities,
       'FWHM': fwhm_values}

#Creando un cuadro de datos con 'data'

df_picos_D8 = pd.DataFrame(data)


# Imprimir las posiciones de los picos
print("Posiciones de los picos:")
print(x[peaks])

# Visualizar el patrón de difracción y los picos
plt.plot(x, y)
plt.plot(x[peaks], y[peaks], "x")
plt.show()

########DataFrame correspondiente a la muestra Dy0.15 Ce0.85 O1.925 - 600C


df1 = pd.read_excel('/content/drive/MyDrive/drx sin ruido /drx dopajes .xlsx',
                    sheet_name = 'D9')
df1 = df1.drop(labels=0 , axis=0)
D9 = df1.rename(columns = {'Tabla 1':'angulo_2theta',
                      'Unnamed: 1':'Intensidad'})
D9 = D9[D9.angulo_2theta<71]
D9.head(3)

#grafica de D9
template = "simple_white"
pio.templates.default = template

drx_D9 = px.line(D9,
                 x='angulo_2theta',
                 y= 'Intensidad'
                 )
drx_D9.update_layout(
      xaxis_title='Angulo 2θ',
      yaxis_title='Intensidad (u.a)',
      title={
        'text': "Patron de difracción de la muestra: Dy0.15 Ce0.85 O1.925 - 600°C",
        'y':0.96,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'}
  )

drx_D9.update_traces(line=dict(color='black'))

drx_D9.add_annotation(x=28.563, y=6500, text="(111)",showarrow=False)
drx_D9.add_annotation(x=33.08, y=4100, text="(200)",showarrow=False)
drx_D9.add_annotation(x=47.4804, y=3900, text="(220)",showarrow=False)
drx_D9.add_annotation(x=56.3514, y=2950, text="(311)",showarrow=False)
drx_D9.add_annotation(x=59.0348, y=1650, text="(222)",showarrow=False)
drx_D9.add_annotation(x=69.3917, y=1400, text="(400)",showarrow=False)
drx_D9.show()

# Datos de la muestra D9
x = D9.angulo_2theta
y = D9.Intensidad

# Encontrar los picos en el patrón de difracción
peaks, _ = find_peaks(y, height=500, width=15)
intensities = y[peaks]
results_half = peak_widths(y, peaks, rel_height=0.5)
fwhm_values = results_half[0]

#imprimir los valores de FWHM

for i, fwhm in enumerate(fwhm_values):
  print(f'FWHM del pico {i+1}: {fwhm}')

#Crear diccionario con la informacion de los picos de drx
data ={'posicion_del_pico': x[peaks],
       'intensidad_del_pico': intensities,
       'FWHM': fwhm_values}

#Creando un cuadro de datos con 'data'

df_picos_D9 = pd.DataFrame(data)


# Imprimir las posiciones de los picos
print("Posiciones de los picos:")
print(x[peaks])

# Visualizar el patrón de difracción y los picos
plt.plot(x, y)
plt.plot(x[peaks], y[peaks], "x")
plt.show()

########DataFrame correspondiente a la muestra Dy0.2 Ce0.8 O1.9 - 400C


df1 = pd.read_excel('/content/drive/MyDrive/drx sin ruido /drx dopajes .xlsx',
                    sheet_name = 'D10')
df1 = df1.drop(labels=0 , axis=0)
D10 = df1.rename(columns = {'Tabla 1':'angulo_2theta',
                      'Unnamed: 1':'Intensidad'})
D10 = D10[D10.angulo_2theta<71]
D10.head(3)

#grafica de D10
template = "simple_white"
pio.templates.default = template

drx_D10 = px.line(D10,
                 x='angulo_2theta',
                 y= 'Intensidad'
                 )
drx_D10.update_layout(
      xaxis_title='Angulo 2θ',
      yaxis_title='Intensidad (u.a)',
      title={
        'text': "Patron de difracción de la muestra: Dy0.2 Ce0.8 O1.9 - 400°C",
        'y':0.96,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'}
  )

drx_D10.update_traces(line=dict(color='black'))

drx_D10.add_annotation(x=28.563, y=4000, text="(111)",showarrow=False)
drx_D10.add_annotation(x=32.5, y=6700, text="(200)",showarrow=False)
drx_D10.add_annotation(x=47.4804, y=2700, text="(220)",showarrow=False)
drx_D10.add_annotation(x=56.3514, y=2250, text="(311)",showarrow=False)
drx_D10.add_annotation(x=58.0348, y=2400, text="(222)",showarrow=False)
drx_D10.add_annotation(x=69.3917, y=1250, text="(400)",showarrow=False)

drx_D10.show()

# Datos de la muestra D10
x = D10.angulo_2theta
y = D10.Intensidad

# Encontrar los picos en el patrón de difracción
peaks, _ = find_peaks(y, height=500, width=8)
intensities = y[peaks]
results_half = peak_widths(y, peaks, rel_height=0.5)
fwhm_values = results_half[0]

#imprimir los valores de FWHM

for i, fwhm in enumerate(fwhm_values):
  print(f'FWHM del pico {i+1}: {fwhm}')

#Crear diccionario con la informacion de los picos de drx
data ={'posicion_del_pico': x[peaks],
       'intensidad_del_pico': intensities,
       'FWHM': fwhm_values}


#Creando un cuadro de datos con 'data'

df_picos_D10 = pd.DataFrame(data)


# Imprimir las posiciones de los picos
print("Posiciones de los picos:")
print(x[peaks])

# Visualizar el patrón de difracción y los picos
plt.plot(x, y)
plt.plot(x[peaks], y[peaks], "x")
plt.show()

########DataFrame correspondiente a la muestra Dy0.2 Ce0.8 O1.9 - 500C


df1 = pd.read_excel('/content/drive/MyDrive/drx sin ruido /drx dopajes .xlsx',
                    sheet_name = 'D11')
df1 = df1.drop(labels=0 , axis=0)
D11 = df1.rename(columns = {'Tabla 1':'angulo_2theta',
                      'Unnamed: 1':'Intensidad'})
D11 = D11[D11.angulo_2theta<71]
D11.head(3)

#grafica de D11
template = "simple_white"
pio.templates.default = template

drx_D11 = px.line(D11,
                 x='angulo_2theta',
                 y= 'Intensidad'
                 )
drx_D11.update_layout(
      xaxis_title='Angulo 2θ',
      yaxis_title='Intensidad (u.a)',
      title={
        'text': "Patron de difracción de la muestra: Dy0.2 Ce0.8 O1.9 - 500°C",
        'y':0.96,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'}
  )

drx_D11.update_traces(line=dict(color='black'))

drx_D11.add_annotation(x=28.563, y=8500, text="(111)",showarrow=False)
drx_D11.add_annotation(x=33.08, y=4300, text="(200)",showarrow=False)
drx_D11.add_annotation(x=47.4804, y=4700, text="(220)",showarrow=False)
drx_D11.add_annotation(x=56.3514, y=3800, text="(311)",showarrow=False)
drx_D11.add_annotation(x=59.0348, y=1550, text="(222)",showarrow=False)
drx_D11.add_annotation(x=69.3917, y=1350, text="(400)",showarrow=False)

drx_D11.show()

# Datos de la muestra D11
x = D11.angulo_2theta
y = D11.Intensidad

# Encontrar los picos en el patrón de difracción
peaks, _ = find_peaks(y, height=500, width=15)
intensities = y[peaks]
results_half = peak_widths(y, peaks, rel_height=0.5)
fwhm_values = results_half[0]

#imprimir los valores de FWHM

for i, fwhm in enumerate(fwhm_values):
  print(f'FWHM del pico {i+1}: {fwhm}')

#Crear diccionario con la informacion de los picos de drx
data ={'posicion_del_pico': x[peaks],
       'intensidad_del_pico': intensities,
       'FWHM': fwhm_values}

#Creando un cuadro de datos con 'data'

df_picos_D11 = pd.DataFrame(data)


# Imprimir las posiciones de los picos
print("Posiciones de los picos:")
print(x[peaks])

# Visualizar el patrón de difracción y los picos
plt.plot(x, y)
plt.plot(x[peaks], y[peaks], "x")
plt.show()

########DataFrame correspondiente a la muestra Dy0.2 Ce0.8 O1.9 - 600C


df1 = pd.read_excel('/content/drive/MyDrive/drx sin ruido /drx dopajes .xlsx',
                    sheet_name = 'D12')
df1 = df1.drop(labels=0 , axis=0)
D12 = df1.rename(columns = {'Tabla 1':'angulo_2theta',
                      'Unnamed: 1':'Intensidad'})

D12 = D12[D12.angulo_2theta<71]
D12.head(3)

#grafica de D12
template = "simple_white"
pio.templates.default = template

drx_D12 = px.line(D12,
                 x='angulo_2theta',
                 y= 'Intensidad'
                 )
drx_D12.update_layout(
      xaxis_title='Angulo 2θ',
      yaxis_title='Intensidad (u.a)',
      title={
        'text': "Patron de difracción de la muestra: Dy0.2 Ce0.8 O1.9 - 600°C",
        'y':0.96,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'}
  )

drx_D12.update_traces(line=dict(color='black'))

drx_D12.add_annotation(x=28.563, y=8500, text="(111)",showarrow=False)
drx_D12.add_annotation(x=33.08, y=4100, text="(200)",showarrow=False)
drx_D12.add_annotation(x=47.4804, y=5200, text="(220)",showarrow=False)
drx_D12.add_annotation(x=56.3514, y=4200, text="(311)",showarrow=False)
drx_D12.add_annotation(x=59.0348, y=1550, text="(222)",showarrow=False)
drx_D12.add_annotation(x=69.3917, y=1450, text="(400)",showarrow=False)

drx_D12.show()

# Datos de la muestra D12
x = D12.angulo_2theta
y = D12.Intensidad

# Encontrar los picos en el patrón de difracción
peaks, _ = find_peaks(y, height=500, width=15)
intensities = y[peaks]
results_half = peak_widths(y, peaks, rel_height=0.5)
fwhm_values = results_half[0]

#imprimir los valores de FWHM

for i, fwhm in enumerate(fwhm_values):
  print(f'FWHM del pico {i+1}: {fwhm}')

#Crear diccionario con la informacion de los picos de drx
data ={'posicion_del_pico': x[peaks],
       'intensidad_del_pico': intensities,
       'FWHM': fwhm_values}



#Creando un cuadro de datos con 'data'

df_picos_D12 = pd.DataFrame(data)


# Imprimir las posiciones de los picos
print("Posiciones de los picos:")
print(x[peaks])

# Visualizar el patrón de difracción y los picos
plt.plot(x, y)
plt.plot(x[peaks], y[peaks], "x")
plt.show()

df_picos_D12

df_picos_D12.iloc[:, 0]

#angulo en radianes
angulo_theta_grados = (df_picos_D12.iloc[:, 0])/2
angulo_theta_grados = angulo_theta_grados.values.tolist()
import numpy as np



# Convertir a radianes utilizando numpy.radians()
angulo_theta_radianes = np.radians(angulo_theta_grados)

#cos_theta

cos_theta = np.cos(angulo_theta_radianes)

cos_theta

#ecuacion de scherrer

K=0.9
L=0.154187
B = (K*L)/((df_picos_D12.FWHM)*(cos_theta))

B

########DataFrame correspondiente a la muestra CeO2 - 400C


df3 = pd.read_excel('/content/drive/MyDrive/drxfwhm/Sin título.xlsx',
                    sheet_name = 'a1')
df3 = df3.drop(labels=0 , axis=0)
D13 = df1.rename(columns = {'Tabla 1':'angulo_2theta',
                      'Unnamed: 1':'Intensidad'})
D13 = D13[D13.angulo_2theta<70]

D13.tail(3)

template = "simple_white"
pio.templates.default = template

drx_D13 = px.line(D13,
                 x='angulo_2theta',
                 y= 'Intensidad',
)
drx_D13.update_layout(
      xaxis_title='Angulo 2θ',
      yaxis_title='Intensidad (u.a)',
      title={
        'text': "Patron de difracción de la muestra: CeO2 - 400°C",
        'y':0.96,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'}
)



drx_D13.update_traces(line=dict(color='black'))

drx_D13.add_annotation(x=28.563, y=450, text="(111)",showarrow=False)
drx_D13.add_annotation(x=33.08, y=230, text="(200)",showarrow=False)
drx_D13.add_annotation(x=47.4804, y=300, text="(220)",showarrow=False)
drx_D13.add_annotation(x=56.3514, y=250, text="(311)",showarrow=False)
drx_D13.add_annotation(x=59.0348, y=80, text="(222)",showarrow=False)
drx_D13.add_annotation(x=69.3917, y=80, text="(400)",showarrow=False)






drx_D13.show()

########DataFrame correspondiente a la muestra CeO2 - 500C


df3 = pd.read_excel('/content/drive/MyDrive/drxfwhm/Sin título.xlsx',
                    sheet_name = 'a1')
df3 = df3.drop(labels=0 , axis=0)
D14 = df1.rename(columns = {'Tabla 1':'angulo_2theta',
                      'Unnamed: 1':'Intensidad'})
D14 = D14[D14.angulo_2theta<70]

D14.tail(3)

template = "simple_white"
pio.templates.default = template

drx_D14 = px.line(D14,
                 x='angulo_2theta',
                 y= 'Intensidad',
)
drx_D14.update_layout(
      xaxis_title='Angulo 2θ',
      yaxis_title='Intensidad (u.a)',
      title={
        'text': "Patron de difracción de la muestra: CeO2 - 500°C",
        'y':0.96,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'}
)



drx_D14.update_traces(line=dict(color='black'))

drx_D14.add_annotation(x=28.563, y=450, text="(111)",showarrow=False)
drx_D14.add_annotation(x=33.08, y=230, text="(200)",showarrow=False)
drx_D14.add_annotation(x=47.4804, y=300, text="(220)",showarrow=False)
drx_D14.add_annotation(x=56.3514, y=250, text="(311)",showarrow=False)
drx_D14.add_annotation(x=59.0348, y=80, text="(222)",showarrow=False)
drx_D14.add_annotation(x=69.3917, y=80, text="(400)",showarrow=False)





drx_D14.show()

########DataFrame correspondiente a la muestra CeO2 - 600C


df3 = pd.read_excel('/content/drive/MyDrive/drxfwhm/Sin título.xlsx',
                    sheet_name = 'a1')
df3 = df3.drop(labels=0 , axis=0)
D15 = df1.rename(columns = {'Tabla 1':'angulo_2theta',
                      'Unnamed: 1':'Intensidad'})
D15 = D15[D15.angulo_2theta<70]

D15.tail(3)

template = "simple_white"
pio.templates.default = template

drx_D15 = px.line(D15,
                 x='angulo_2theta',
                 y= 'Intensidad',
)
drx_D15.update_layout(
      xaxis_title='Angulo 2θ',
      yaxis_title='Intensidad (u.a)',
      title={
        'text': "Patron de difracción de la muestra: CeO2 - 600°C",
        'y':0.96,
        'x':0.5,
        'xanchor': 'center',
        'yanchor': 'top'}
)



drx_D15.update_traces(line=dict(color='black'))

drx_D15.add_annotation(x=28.563, y=430, text="(111)",showarrow=False)
drx_D15.add_annotation(x=33.08, y=230, text="(200)",showarrow=False)
drx_D15.add_annotation(x=47.4804, y=300, text="(220)",showarrow=False)
drx_D15.add_annotation(x=56.3514, y=250, text="(311)",showarrow=False)
drx_D15.add_annotation(x=59.0348, y=80, text="(222)",showarrow=False)
drx_D15.add_annotation(x=69.3917, y=80, text="(400)",showarrow=False)






drx_D15.show()

# Datos de la muestra D12
x = D12.angulo_2theta
y = D12.Intensidad

# Encontrar los picos en el patrón de difracción
peaks, _ = find_peaks(y, height=500, width=15)
intensities = y[peaks]
results_half = peak_widths(y, peaks, rel_height=0.5)
fwhm_values = results_half[0]

#imprimir los valores de FWHM

for i, fwhm in enumerate(fwhm_values):
  print(f'FWHM del pico {i+1}: {fwhm}')

#Crear diccionario con la informacion de los picos de drx
data ={'posicion_del_pico': x[peaks],
       'intensidad_del_pico': intensities,
       'FWHM': fwhm_values}



#Creando un cuadro de datos con 'data'

df_picos_D12 = pd.DataFrame(data)


# Imprimir las posiciones de los picos
print("Posiciones de los picos:")
print(x[peaks])

# Visualizar el patrón de difracción y los picos
plt.plot(x, y)
plt.plot(x[peaks], y[peaks], "x")
plt.show()

df_picos_D12



import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit

# Datos de la muestra D12
x = np.array(D12.angulo_2theta, dtype=float)
y = np.array(D12.Intensidad, dtype=float)

# Definir la función Gaussiana
def gaussian(x, amplitude, mean, stddev):
    return amplitude * np.exp(-(x - mean)**2 / (2 * stddev**2))

# Realizar el ajuste Gaussiano
p0 = [max(y), np.mean(x), 1]  # Valores iniciales para los parámetros
params, _ = curve_fit(gaussian, x, y, p0=p0)
amplitude_fit, mean_fit, stddev_fit = params

# Generar los valores ajustados
x_fit = np.linspace(min(x), max(x), 100)
y_fit = gaussian(x_fit, amplitude_fit, mean_fit, stddev_fit)

# Graficar los datos originales y el ajuste
plt.plot(x, y, 'b.', label='Datos originales')
plt.plot(x_fit, y_fit, 'r-', label='Ajuste Gaussiano')
plt.xlabel('Angulo 2theta')
plt.ylabel('Intensidad')
plt.legend()
plt.show()

D12 = D12[(D12.angulo_2theta<=31) & (D12.angulo_2theta>26)]
D12

#ajuste gausiano picos drx

x =D12.iloc[:,0].to_numpy()
x = np.array(x).astype(float)
y = D12.iloc[:,1].to_numpy()
y = np.array(y).astype(float)


def gaussian(x, amplitude, mean, stddev):
  return amplitude*np.exp(-(x-mean)**2/(2*stddev**2))

p0 = [0.05, np.mean(x), 0.05]
params, _ = curve_fit(gaussian, x, y, p0=p0)

amplitude_fit, mean_fit, stddev_fit = params


plt.plot(x, y, 'bo', label='Espectro original')
plt.plot(x, gaussian(x, amplitude_fit, mean_fit, stddev_fit), 'r-', label='Ajuste Gaussiano')

x











